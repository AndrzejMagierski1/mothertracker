#include "sdramTest.h"
#include "mtStructs.h"
#include "sdram.h"
#include "SD.h"
#include "mtAudioEngine.h"
#include "mtSequencer.h"

SdramTester sdramTester;
constexpr uint8_t RW_NUMBER = 10;

__NOINIT(EXTERNAL_RAM) uint8_t test_ram[1024];
uint8_t val_tab[1024];
const uint8_t val_tab_flash[1024] =
{
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
	 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA
};


char * logText[] =
{
		(char*)"A9\t\t - PTD5\t\t - PORTD_PCR5:\t\t ",
		(char*)"A10\t\t - PTD4\t\t - PORTD_PCR4:\t\t ",
		(char*)"A11\t\t - PTD3\t\t - PORTD_PCR3:\t\t ",
		(char*)"A12\t\t - PTD2\t\t - PORTD_PCR2:\t\t ",
		(char*)"A13\t\t - PTC10\t - PORTC_PCR10:\t\t ",
		(char*)"A14\t\t - PTC9\t\t - PORTC_PCR9:\t\t ",
		(char*)"A15\t\t - PTC8\t\t - PORTC_PCR8:\t\t ",
		(char*)"A16\t\t - PTC7\t\t - PORTC_PCR7:\t\t ",
		(char*)"A17\t\t - PTC6\t\t - PORTC_PCR6:\t\t ",
		(char*)"A18\t\t - PTC5\t\t - PORTC_PCR5:\t\t ",
		(char*)"A19\t\t - PTC4\t\t - PORTC_PCR4:\t\t ",
		(char*)"A20\t\t - PTC2\t\t - PORTC_PCR2:\t\t ",
		(char*)"A21\t\t - PTC1\t\t - PORTC_PCR1:\t\t ",
		(char*)"A22\t\t - PTC0\t\t - PORTC_PCR0:\t\t ",
		(char*)"A23\t\t - PTB18\t - PORTB_PCR18:\t\t "
};

void SdramTester::test()
{
	uint16_t logCnt = 0;
	char currentName[100];

	sprintf(currentName,"RamErrorLog.txt");

	while(SD.exists(currentName))
	{
		sprintf(currentName,"RamErrorLog%d.txt", ++logCnt);
	}

	SdFile log = SD.open(currentName, SD_FILE_WRITE);


	for(uint8_t j = 0; j < RW_NUMBER; j++)
	{
		memcpy(val_tab,val_tab_flash, 1024);
		memset(test_ram,0,1024);
		for(uint16_t i = 0; i < 1024; i++)
		{
			test_ram[i] = val_tab[i];
			if(test_ram[i]  != 0xAA ) log.println("RAM ZEPSUTY ZAPIS");
		}

		memcpy(test_ram,val_tab_flash, 1024);
		memset(val_tab,0,1024);

		for(uint16_t i = 0; i < 1024; i++)
		{
			val_tab[i] = test_ram[i];
			if(val_tab[i]  != 0xAA ) log.println("RAM ZEPSUTY ODCZYT");
		}
	}


	log.println("//***********************ZAKONCZONO TEST ZAPISU I ODCZYTU************************//");
	log.println("//*******************BRAK TEKSTU POWYZEJ OZNACZA BRAK BLEDOW*********************//");
	log.println("");

	uint PCR_Regs[] = { PORTD_PCR5, PORTD_PCR4, PORTD_PCR3, PORTD_PCR2, PORTC_PCR10, PORTC_PCR9, PORTC_PCR8, PORTC_PCR7, PORTC_PCR6, PORTC_PCR5, PORTC_PCR4, PORTC_PCR2, PORTC_PCR1, PORTC_PCR0, PORTB_PCR18};

	uint8_t addressLineNumber = sizeof(PCR_Regs)/sizeof(int);

	log.println("Ram\t\t   uC\t\t   Port\t\t\t  Mux");
	for(uint8_t i = 0; i < addressLineNumber ; i++)
	{
		uint8_t mux_val = (PCR_Regs[i] & PORT_PCR_MUX_MASK) >> 8;
		log.printf("%s%d",logText[i], mux_val);
		if(mux_val != 5) log.print(" BLEDNA FUNKCJA ALTERNATYWNA");
		log.println();
	}

	log.println("//****************************AKTYWNE INSTRUMENTY********************************//");
	log.println("");
	for(uint8_t i = 0; i< 48; i++)
	{
		if(mtProject.instrument[i].isActive)
		{
			log.printf("idx: %02d \t\t addr: %x \t\t length: %d \n", i,(uint32_t)mtProject.instrument[i].sample.address,mtProject.instrument[i].sample.length );
		}
	}

	log.println("//*****************************CURRENT PATTERN**********************************//");
	Sequencer::strPattern * localPatt = sequencer.getActualPattern();
	log.println("   |TRACK1| \t |TRACK2| \t |TRACK3| \t |TRACK4| \t |TRACK5| \t |TRACK6| \t |TRACK7| \t |TRACK8| ");

	for(uint8_t j = 0; j <= localPatt->track[0].length; j++)
	{
		if(j == sequencer.getActualPos())
		{
			log.println("   -------- \t -------- \t -------- \t -------- \t -------- \t -------- \t -------- \t -------- ");
		}
		log.printf("%02d.",j+1);
		for(uint8_t i = 0; i < 8; i++)
		{
			if(localPatt->track[i].step[j].note != -1) log.printf("|I%02dN%02d| \t ", localPatt->track[i].step[j].instrument, localPatt->track[i].step[j].note);
			else log.print("|******| \t ");
		}
		log.println("");
		if(j == sequencer.getActualPos()) log.println("   -------- \t -------- \t -------- \t -------- \t -------- \t -------- \t -------- \t -------- ");

	}



	engine.printLog(&log);
	log.close();
}
